[{"C:\\Programming\\sudoku solver\\sudoku-solver\\src\\index.js":"1","C:\\Programming\\sudoku solver\\sudoku-solver\\src\\App.js":"2","C:\\Programming\\sudoku solver\\sudoku-solver\\src\\reportWebVitals.js":"3","C:\\Programming\\sudoku solver\\sudoku-solver\\src\\Sudoku.js":"4","C:\\Programming\\sudoku solver\\sudoku-solver\\src\\solve.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":1233,"mtime":1611868817439,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":1732,"mtime":1611869277127,"results":"10","hashOfConfig":"7"},{"size":1243,"mtime":1611868210763,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1klxzx",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Programming\\sudoku solver\\sudoku-solver\\src\\index.js",[],["25","26"],"C:\\Programming\\sudoku solver\\sudoku-solver\\src\\App.js",["27"],"import './App.css';\nimport Sudoku from './Sudoku';\nimport solve_sudoku from './solve';\nimport { useState } from 'react';\n\nfunction App() {\n  const [sudoku, setSudoku] = useState([\n    [0, 0, 4, 3, 0, 0, 0, 0, 1],\n    [0, 0, 7, 0, 9, 1, 2, 4, 0],\n    [1, 9, 0, 0, 4, 0, 8, 0, 0],\n    [7, 0, 9, 2, 0, 0, 5, 0, 6],\n    [0, 0, 2, 0, 5, 0, 0, 3, 0],\n    [0, 0, 0, 0, 7, 6, 9, 1, 2],\n    [4, 0, 5, 0, 8, 0, 0, 0, 0],\n    [2, 7, 0, 0, 0, 0, 1, 5, 8],\n    [0, 0, 0, 6, 2, 5, 3, 7, 0]\n  ])\n\n  const setCell = (x, y, value) => {\n    sudoku[x][y] = value;\n    setSudoku(sudoku);\n  }\n\n  const handleSolve = () => {\n    const solutions = solve_sudoku(sudoku);\n    if (solutions.length==0) {\n      console.log('No solutions');\n      return;\n    }\n    if (solutions.length>1) {\n      console.log('Many solutions');\n    }\n    setSudoku(solve_sudoku(sudoku)[0])\n  };\n\n  const handleClear = () => {\n    const cleared = sudoku.map(x=>x.map(y=>0));\n    setSudoku(cleared);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Sudoku solver</h1>\n      <Sudoku sudoku={sudoku} setCell={setCell} />\n      <button onClick={() => handleSolve()}>solve</button>\n      <button onClick={() => handleClear()}>clear</button>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Programming\\sudoku solver\\sudoku-solver\\src\\reportWebVitals.js",[],"C:\\Programming\\sudoku solver\\sudoku-solver\\src\\Sudoku.js",[],"C:\\Programming\\sudoku solver\\sudoku-solver\\src\\solve.js",[],["28","29"],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":26,"column":25,"nodeType":"36","messageId":"37","endLine":26,"endColumn":27},{"ruleId":"30","replacedBy":"38"},{"ruleId":"32","replacedBy":"39"},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["40"],["41"],"no-global-assign","no-unsafe-negation"]